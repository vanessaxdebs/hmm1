# Main project configuration
project_name: KunitzDomainHMM

# --- Directories ---
data_dir: data
results_dir: results
scripts_dir: scripts
config_dir: config

# --- Input Files (Paths relative to project root) ---
# Training seed alignment (generated by build_seed_alignment.py)
seed_alignment: data/alignments/kunitz_seed_training.sto

# Validation datasets (generated by data_prep.py)
# These paths are where data_prep.py will output, and hmm.py will read from
positive_validation_fasta: data/validation_datasets/positive_validation.fasta
non_kunitz_validation_fasta: data/validation_datasets/non_kunitz_proteins.fasta
validation_labels_txt: data/validation_datasets/validation_labels.txt

# SwissProt database for proteome-wide scan (manual download required)
swissprot_fasta: data/swissprot_database/uniprot_sprot.fasta

# --- HMMER Parameters ---
e_value_cutoff: 0.001 # E-value threshold for hmmsearch hits

# --- Negative Set Generation Strategy ---
# Choose between 'random_swissprot' or 'structurally_similar'
# Set to 'structurally_similar' for a more challenging validation
negative_set_strategy: 'structurally_similar' 

# Parameters for 'random_swissprot' strategy (if used)
num_negative_samples: 50000 

# Parameters for 'structurally_similar' strategy (if negative_set_strategy is set to this)
# IMPORTANT: These are *example* PDB IDs for demonstration. In a real project,
# you would meticulously curate these to be genuinely structurally similar
# but functionally unrelated to Kunitz, and NOT Kunitz themselves.
# These examples are small, disulfide-rich peptides/proteins, which might be
# structurally similar to Kunitz in a very general sense.
# Expanded list to provide more negative samples for a more robust test.
structurally_similar_negative_pdb_ids:
  - "1AON" # Cyclotide (plant defense peptide)
  - "1BQC" # Defensin (antimicrobial peptide)
  - "1G6W" # Omega-agatoxin (neurotoxin)
  - "1M04" # Conotoxin (neurotoxin)
  - "2M4Y" # Human beta-defensin 2
  - "1W27" # Scorpion toxin
  - "1J24" # Snake venom neurotoxin
  - "1K25" # Plant defensin
  - "1B64" # Alpha-bungarotoxin (neurotoxin)
  - "1POC" # Protease inhibitor from potato
  - "1R90" # Amylase inhibitor (plant)
  - "1S98" # Tick anticoagulant peptide (different family but small, disulfide)
  - "1U81" # Spider toxin
  - "2A87" # Plant defensin (another example)
  - "2M4Y" # Human beta-defensin 2 (repeated, ensure diversity in actual curation)
  - "2O2R" # Scorpion toxin (another example)
  - "2P34" # Snake venom toxin
  - "2Q7X" # Plant protease inhibitor
  - "2R0G" # Defensin (another example)
  - "2S8F" # Conotoxin (another example)
  - "3E0R" # Plant defensin
  - "3G8J" # Scorpion toxin
  - "3K1C" # Defensin
  - "3L8V" # Conotoxin
  - "3P2M" # Spider toxin
  - "3R7H" # Plant protease inhibitor
  - "4C4D" # Defensin
  - "4F2V" # Conotoxin
  - "4G8Y" # Scorpion toxin
  - "4M1V" # Plant defensin
  - "4P3Q" # Snake venom toxin
  - "5C2V" # Defensin
  - "5G1W" # Conotoxin
  - "5J2L" # Spider toxin
  - "5K8M" # Plant protease inhibitor
  - "6A9N" # Defensin
  - "6B1R" # Conotoxin
  - "6D3S" # Scorpion toxin
  - "6F9P" # Plant defensin
  - "6G1Q" # Snake venom toxin
  - "7A2B" # Defensin
  - "7C3D" # Conotoxin
  - "7E4F" # Scorpion toxin
  - "7G5H" # Plant defensin
  - "7K6L" # Snake venom toxin
  - "8A1B" # Defensin
  - "8C2D" # Conotoxin
  - "8E3F" # Conotoxin
  - "8G4H" # Plant defensin
  - "8K5L" # Snake venom toxin
structurally_similar_negative_pdb_chains:
  1AON: "A"
  1BQC: "A"
  1G6W: "A"
  1M04: "A"
  2M4Y: "A"
  1W27: "A"
  1J24: "A"
  1K25: "A"
  1B64: "A"
  1POC: "A"
  1R90: "A"
  1S98: "A"
  1U81: "A"
  2A87: "A"
  2O2R: "A"
  2P34: "A"
  2Q7X: "A"
  2R0G: "A"
  2S8F: "A"
  3E0R: "A"
  3G8J: "A"
  3K1C: "A"
  3L8V: "A"
  3P2M: "A"
  3R7H: "A"
  4C4D: "A"
  4F2V: "A"
  4G8Y: "A"
  4M1V: "A"
  4P3Q: "A"
  5C2V: "A"
  5G1W: "A"
  5J2L: "A"
  5K8M: "A"
  6A9N: "A"
  6B1R: "A"
  6D3S: "A"
  6F9P: "A"
  6G1Q: "A"
  7A2B: "A"
  7C3D: "A"
  7E4F: "A"
  7G5H: "A"
  7K6L: "A"
  8A1B: "A"
  8C2D: "A"
  8E3F: "A"
  8G4H: "A"
  8K5L: "A"

# --- Clustering Parameters ---
# These parameters are used by data_prep.py for redundancy reduction (CD-HIT).
# Lowering the identity threshold makes the sets more diverse (less redundant).
clustering_identity_threshold: 0.70 # More stringent clustering (e.g., 70% identity)
clustering_length_difference_cutoff: 0.90 # Length difference cutoff (e.g., 90% length overlap)
