# Main project configuration
project_name: KunitzDomainHMM

# --- Directories ---
data_dir: data
results_dir: results
scripts_dir: scripts
config_dir: config

# --- Input Files (Paths relative to project root) ---
# Training seed alignment (generated by build_seed_alignment.py)
seed_alignment: data/alignments/kunitz_seed_training.sto

# Validation datasets (generated by data_prep.py)
# These paths are where data_prep.py will output, and hmm.py will read from
positive_validation_fasta: data/validation_datasets/positive_validation.fasta
non_kunitz_validation_fasta: data/validation_datasets/non_kunitz_proteins.fasta
validation_labels_txt: data/validation_datasets/validation_labels.txt

# SwissProt database for proteome-wide scan (manual download required)
swissprot_fasta: data/swissprot_database/uniprot_sprot.fasta

# --- HMMER Parameters ---
e_value_cutoff: 0.001 # E-value threshold for hmmsearch hits

# --- Negative Set Generation Strategy ---
# Choose between 'random_swissprot' or 'structurally_similar'
# Reverting to 'random_swissprot' for easier large-scale automation of negatives.
negative_set_strategy: 'random_swissprot' 

# Parameters for 'random_swissprot' strategy (if used)
# Significantly increased number of negative samples for a more robust test.
num_negative_samples: 500000 # Increased to 500,000 (or even 1,000,000 if needed)

# Parameters for 'structurally_similar' strategy (if negative_set_strategy is set to this)
# Keeping this section for reference, but it won't be used with 'random_swissprot' strategy.
# Manual curation or advanced structural search tools would be needed for a truly large
# and diverse set of "hard" structurally similar negatives.
structurally_similar_negative_pdb_ids:
  - "1AON" # Cyclotide (plant defense peptide)
  - "1BQC" # Defensin (antimicrobial peptide)
  # ... (rest of your expanded list, kept for completeness but not actively used)
structurally_similar_negative_pdb_chains:
  1AON: "A"
  1BQC: "A"
  # ... (rest of your expanded list, kept for completeness but not actively used)

# --- Clustering Parameters ---
# These parameters are used by data_prep.py for redundancy reduction (CD-HIT).
# Lowering the identity threshold makes the sets more diverse (less redundant).
clustering_identity_threshold: 0.70 # More stringent clustering (e.g., 70% identity)
clustering_length_difference_cutoff: 0.90 # Length difference cutoff (e.g., 90% length overlap)
